{
  "rules": [
    {
      "type": "React",
      "instructions": "Use functional components with hooks (useState, useEffect, etc.). Prefer modular components with single responsibility and leverage TypeScript for type safety. Implement responsive design using Tailwind CSS. Optimize images using lazy loading techniques and WebP format. Use suspense for lazy-loaded components and handle global state with Context API or React Query for caching."
    },
    {
      "type": "Vite",
      "instructions": "Leverage Vite's fast bundling and hot module replacement. Use dynamic importing for lazy-loaded routes and components. Configure Vite for efficient build performance using code splitting."
    },
    {
      "type": "FastAPI",
      "instructions": "Use async functions to handle I/O-bound tasks efficiently. Utilize Pydantic models for data validation and serialization. Optimize routes using FastAPI's dependency injection system. Ensure proper exception handling using custom exceptions or HTTPException. Employ middleware for logging and error monitoring."
    },
    {
      "type": "Python",
      "instructions": "Follow conventions using type hints and descriptive variable names. Implement RESTful APIs with clear separation of concern."
    },
    {
      "type": "PythonBackendDevelopment",
      "description": "Instructions for handling Python backend development using well-organized classes and modern type hints",
      "instructions": [
        "Prioritize the use of classes to maintain a well-structured codebase",
        "Apply SOLID principles to ensure each class has a single responsibility",
        "Use type hints extensively to improve code readability and maintainability",
        "Prefer composition over inheritance to maximize flexibility",
        "Ensure that each class encapsulates its data and behavior effectively",
        "Implement comprehensive testing for each class to ensure functionality and robustness",
        "Follow PEP 8 guidelines for naming conventions and code organization",
        "Optimize for readability and future extensibility when designing class hierarchies",
        "Use dependency injection to decouple components and improve testability",
        "Implement abstract base classes (ABC) for defining interfaces",
        "Use dataclasses or Pydantic models for data structures",
        "Leverage async/await for I/O operations",
        "Implement proper error handling with custom exceptions",
        "Use repository pattern for data access",
        "Follow service layer pattern for business logic"
      ]
    },
    {
      "type": "Supabase",
      "instructions": "Use Supabase for authentication and real-time capabilities. Securely handle JWTs for session management. Leverage Supabase's functions for complex queries when needed."
    },
    {
      "type": "PostgreSQL",
      "instructions": "Optimize database interactions using connection pooling and prepared statements for query execution."
    },
    {
      "type": "Documentation",
      "instructions": "• All docs in markdown (.md) within the docs folder, which may contain nested folders by topic.\n• Focus on beginner-friendly writing, step-by-step guides, and examples.\n• Use consistent formatting, headings, bullet points, and code blocks.\n• Refer to best practices for each programming topic.\n• Consider including a table of contents and illustrative images or diagrams.\n• Update documentation regularly and encourage feedback from peers."
    }
  ]
}